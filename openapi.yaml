openapi: 3.0.0
info:
  title: My Microservice API
  version: 1.0.0
  description: |
    A comprehensive REST API for user management operations.
    
    This microservice provides essential user management capabilities including:
    - User CRUD operations
    - Health monitoring endpoints
    - Authentication integration
    - Caching support
    
    Built with Node.js/Express and designed for cloud-native deployments.
  contact:
    name: Platform Team
    email: platform-team@company.com
    url: https://github.com/platform-team/my-microservice
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://my-microservice.example.com
    description: Production server
  - url: https://my-microservice-staging.example.com
    description: Staging server
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Health
    description: Health and monitoring endpoints
  - name: Users
    description: User management operations
  - name: System
    description: System information endpoints

paths:
  /:
    get:
      tags:
        - System
      summary: Service information
      description: Returns basic information about the microservice
      operationId: getServiceInfo
      responses:
        '200':
          description: Service information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to My Microservice"
                  version:
                    type: string
                    example: "1.0.0"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00.000Z"
                  environment:
                    type: string
                    example: "production"

  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the health status of the service for liveness probes
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00.000Z"
                  uptime:
                    type: number
                    example: 3600.123
                    description: Service uptime in seconds
                  memory:
                    type: object
                    properties:
                      rss:
                        type: number
                        example: 50331648
                      heapTotal:
                        type: number
                        example: 20971520
                      heapUsed:
                        type: number
                        example: 15728640
                  version:
                    type: string
                    example: "v18.17.0"
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ready:
    get:
      tags:
        - Health
      summary: Readiness check endpoint
      description: Returns the readiness status of the service for readiness probes
      operationId: getReadiness
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ready"
                  timestamp:
                    type: string
                    format: date-time
                  checks:
                    type: object
                    properties:
                      database:
                        type: string
                        example: "ok"
                      externalService:
                        type: string
                        example: "ok"
                      cache:
                        type: string
                        example: "ok"
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of all users
      operationId: getUsers
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          description: Search term for filtering users
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    example: 100
                    description: Total number of users
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user in the system
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their unique identifier
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  timestamp:
                    type: string
                    format: date-time
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  timestamp:
                    type: string
                    format: date-time
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user from the system
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier for the user
        name:
          type: string
          example: "John Doe"
          description: Full name of the user
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: Email address of the user
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
          description: Timestamp when the user was created
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
          description: Timestamp when the user was last updated
        status:
          type: string
          enum: [active, inactive, suspended]
          example: "active"
          description: Current status of the user

    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: "John Doe"
          description: Full name of the user
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: Email address of the user

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
          description: Full name of the user
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: Email address of the user
        status:
          type: string
          enum: [active, inactive, suspended]
          example: "active"
          description: Current status of the user

    Error:
      type: object
      required:
        - error
        - timestamp
      properties:
        error:
          type: string
          example: "User not found"
          description: Error message
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
          description: Timestamp when the error occurred
        details:
          type: string
          example: "The requested user with ID 123 does not exist"
          description: Additional error details

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []